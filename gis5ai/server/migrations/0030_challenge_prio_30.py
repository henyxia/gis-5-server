# Generated by Django 4.1 on 2022-09-21 18:37

from django.db import migrations

name='One hot encorder'

def challenge(apps, schema_editor):
    Challenge = apps.get_model('server', 'Challenge')
    chall = Challenge(
        name=name,
        priority=30,
        minimal_version="0.0.30",
        validator="algo_one_hot",
        description="""# One hot encoder!
Nicely done with the multi layer perceptron!

Enough with the supervised algorithm.
Let's now quickly dive into data preprocessing.
This will be the last step before the two real world examples.

We will use the one hot encoder.
It will be configured to skip binary entries.
The payload will be composed of `X` as an array of array, composing the data to encode.
The `Y` will contain a single instance of data to transform against this encoder.

On your endpoint `/preprocessing/encoder/one-hot`, you will have to return the test data with its columns.
The columns are `package_color` and `package_label`.
Using the `get_feature_names_out` method could be helpful.

Example of expected response.
```
{
  "package_color_Purple": 0,
  "package_color_Orange": 1,
  "package_label_1": 0
}
```
""",
    )
    chall.save()

def reverse_challenge(apps, schema_editor):
    Challenge = apps.get_model('server', 'Challenge')
    challs = Challenge.objects.filter(name=name)
    for chall in challs:
        chall.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('server', '0023_challenge_prio_23'),
    ]

    operations = [
        migrations.RunPython(challenge, reverse_challenge)
    ]
