# Generated by Django 4.1 on 2022-09-18 15:15

from django.db import migrations

name='Random forest classification'

def challenge(apps, schema_editor):
    Challenge = apps.get_model('server', 'Challenge')
    chall = Challenge(
        name=name,
        priority=13,
        minimal_version="0.0.13",
        validator="algo_random_forest_class",
        description="""# Random Forest classification!
The decision tree classificator is done, well played!
As you might have seen, the decision tree is sometimes imprecise.
To improve its result, let's now focus on the random forest classificator.

Using almost all default settings and the same payload as before, create an endpoint on `/algo/random-forest/class`.
The particuliar thing to note is that you will use your number as `random_state`.

## Goal

You will have to return the predicted class with the precision associated.
```
{
  "predicted_class": 0,
  "precision": 0.8
}
```
""",
    )
    chall.save()

def reverse_challenge(apps, schema_editor):
    Challenge = apps.get_model('server', 'Challenge')
    challs = Challenge.objects.filter(name=name)
    for chall in challs:
        chall.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('server', '0016_challenge_prio_12'),
    ]

    operations = [
        migrations.RunPython(challenge, reverse_challenge)
    ]
